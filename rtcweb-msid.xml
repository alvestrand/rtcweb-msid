<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-mmusic-msid-15" ipr="trust200902">
  <front>
    <title abbrev="MSID in SDP">WebRTC MediaStream Identification in the
    Session Description Protocol</title>

    <author fullname="Harald Alvestrand" initials="H. T." surname="Alvestrand">
      <organization>Google</organization>

      <address>
        <postal>
          <street>Kungsbron 2</street>

          <city>Stockholm</city>

          <region/>

          <code>11122</code>

          <country>Sweden</country>
        </postal>

        <email>harald@alvestrand.no</email>
      </address>
    </author>

    <date day="7" month="July" year="2016"/>

    <abstract>
      <t>This document specifies a Session Description Protocol (SDP) Grouping
      mechanism for RTP media streams that can be used to specify relations
      between media streams.</t>

      <t>This mechanism is used to signal the association between the SDP
      concept of "media description" and the WebRTC concept of "MediaStream" /
      "MediaStreamTrack" using SDP signaling.</t>

      <t>This document is a work item of the MMUSIC WG, whose discussion list
      is mmusic@ietf.org.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t/>

      <section title="Terminology">
        <t>This document uses terminology from <xref
        target="I-D.ietf-rtcweb-overview"/>. In addition, the following terms
        are used as described below:</t>

        <t><list style="hanging">
            <t hangText="RTP stream">Defined in <xref target="RFC7656"/> as a
            stream of RTP packets containing media data.</t>

            <t hangText="MediaStream">Defined in <xref
            target="W3C.CR-mediacapture-streams-20160519"/>as an assembly of
            MediaStreamTracks. One MediaStream can contain multiple
            MediaStreamTracks, of the same or different types.</t>

            <t hangText="MediaStreamTrack">Defined in <xref
            target="W3C.CR-mediacapture-streams-20160519"/>as an
            unidirectional flow of media data (either audio or video, but not
            both). Corresponds to the <xref target="RFC7656"/> term "Source
            Stream". One MediaStreamTrack can be present in zero, one or
            multiple MediaStreams.</t>

            <t hangText="Media description">Defined in <xref
            target="RFC4566"/> as a set of fields starting with an "m=" field
            and terminated by eitehr the next "m=" field or by the end of the
            session description.</t>
          </list></t>
      </section>

      <section title="Structure Of This Document">
        <t>This document adds a new Session Description Protocol (SDP) <xref
        target="RFC4566"/> mechanism that can attach identifiers to the RTP
        streams and attaching identifiers to the groupings they form. It is
        designed for use with WebRTC<xref target="I-D.ietf-rtcweb-overview"/>
        .</t>

        <t><xref target="sect-why"/> gives the background on why a new
        mechanism is needed.</t>

        <t><xref target="sect-definition"/> gives the definition of the new
        mechanism.</t>

        <t><xref target="sect-media-stream"/> gives the necessary semantic
        information and procedures for using the msid attribute to signal the
        association of MediaStreamTracks to MediaStreams in support of the
        WebRTC API <xref target="W3C.WD-webrtc-20160531"/>.</t>
      </section>

      <section anchor="sect-why" title="Why A New Mechanism Is Needed">
        <t>When media is carried by RTP <xref target="RFC3550"/>, each RTP
        stream is distinguished inside an RTP session by its SSRC; each RTP
        session is distinguished from all other RTP sessions by being on a
        different transport association (strictly speaking, 2 transport
        associations, one used for RTP and one used for RTCP, unless RTP/RTCP
        multiplexing <xref target="RFC5761"/> is used).</t>

        <t>SDP <xref target="RFC4566"/> gives a format for describing an SDP
        session that can contain multiple media descriptions. According to the
        model used in <xref target="I-D.ietf-rtcweb-jsep"/>, each media
        description describes exactly one media source, and if multiple media
        sources are carried in an RTP session, this is signalled using BUNDLE
        <xref target="I-D.ietf-mmusic-sdp-bundle-negotiation"/>; if BUNDLE is
        not used, each media source is carried in its own RTP session.</t>

        <t>The SDP grouping framework <xref target="RFC5888"/> can be used to
        group media descriptions. However, for the use case of WebRTC, there
        is the need for an application to specify some application-level
        information about the association between the media description and
        the group. This is not possible using the SDP grouping framework.</t>
      </section>

      <section title="The WEBRTC MediaStream">
        <t>The W3C WebRTC API specification <xref
        target="W3C.WD-webrtc-20160531"/> specifies that communication between
        WebRTC entities is done via MediaStreams, which contain
        MediaStreamTracks. A MediaStreamTrack is generally carried using a
        single SSRC in an RTP session (forming an RTP stream. The collision of
        terminology is unfortunate.) There might possibly be additional SSRCs,
        possibly within additional RTP sessions, in order to support
        functionality like forward error correction or simulcast. These
        additional SSRCs are not affected by this specification.</t>

        <t>MediaStreamTracks are unidirectional; they carry media on one
        direction only.</t>

        <t>In the RTP specification, RTP streams are identified using the SSRC
        field. Streams are grouped into RTP Sessions, and also carry a CNAME.
        Neither CNAME nor RTP session correspond to a MediaStream. Therefore,
        the association of an RTP stream to MediaStreams need to be explicitly
        signaled.</t>

        <t>WebRTC defines a mapping (documented in <xref
        target="I-D.ietf-rtcweb-jsep"/>) where one SDP media description is
        used to describe each MediaStreamTrack, and the BUNDLE mechanism <xref
        target="I-D.ietf-mmusic-sdp-bundle-negotiation"/> is used to group
        MediaStreamTracks into RTP sessions. Therefore, the need is to specify
        the ID of a MediaStreamTrack and its associated MediaStream for each
        media description, which can be accomplished with a media-level SDP
        attribute.</t>

        <t>This usage is described in <xref target="sect-media-stream"/>.</t>
      </section>
    </section>

    <section anchor="sect-definition" title="The Msid Mechanism">
      <t>This document defines a new SDP <xref target="RFC4566"/> media-level
      "msid" attribute. This new attribute allows endpoints to associate RTP
      streams that are described in different media descriptions with the same
      MediaStreams as defined in <xref target="W3C.WD-webrtc-20160531"/>, and
      to carry an identifier for each MediaStreamTrack in its "appdata"
      field.</t>

      <t>The value of the "msid" attribute consists of an identifier and an
      optional "appdata" field.</t>

      <t>The name of the attribute is "msid".</t>

      <t>The value of the attribute is specified by the following ABNF <xref
      target="RFC5234"/> grammar:</t>

      <t/>

      <figure>
        <artwork><![CDATA[
  msid-value = msid-id [ SP msid-appdata ]
  msid-id = 1*64token-char ; see RFC 4566
  msid-appdata = 1*64token-char  ; see RFC 4566

]]></artwork>
      </figure>

      <t>An example msid value for a group with the identifier "examplefoo"
      and application data "examplebar" might look like this:</t>

      <figure>
        <artwork><![CDATA[
  msid:examplefoo examplebar

]]></artwork>
      </figure>

      <t>The identifier is a string of ASCII characters that are legal in a
      "token", consisting of between 1 and 64 characters.</t>

      <t>Application data (msid-appdata) is carried on the same line as the
      identifier, separated from the identifier by a space.</t>

      <t>The identifier (msid-id) uniquely identifies a group within the scope
      of an SDP description.</t>

      <t>There may be multiple msid attributes in a single media description.
      This represents the case where a single MediaStreamTrack is present in
      multiple MediaStreams; the value of "msid-appdata" MUST be identical for
      all occurences.</t>

      <t>Multiple media descriptions with the same value for msid-id and
      msid-appdata are not permitted.</t>

      <t>Endpoints can update the associations between RTP streams as
      expressed by msid attributes at any time.</t>

      <t>The msid attributes depend on the association of RTP streams with
      media descriptions, but does not depend on the association of RTP
      streams with RTP transports; therefore, its mux category (as defined in
      <xref target="I-D.ietf-mmusic-sdp-mux-attributes"/>) is NORMAL - the
      process of deciding on MSID attributes doesn't have to take into
      consideration whether the RTP streams are bundled or not.</t>
    </section>

    <section anchor="sect-media-stream" title="Procedures">
      <t>This section describes the procedures for associating media
      descriptions representing MediaStreamTracks within MediaStreams as
      defined in <xref target="W3C.WD-webrtc-20160531"/>.</t>

      <t>In the Javascript API described in that specification, each
      MediaStream and MediaStreamTrack has an "id" attribute, which is a
      DOMString.</t>

      <t>The value of the "msid-id" field in the msid consists of the "id"
      attribute of a MediaStream, as defined in the MediaStream's WebIDL
      specification.</t>

      <t>The value of the "msid-appdata" field in the msid consists of the
      "id" attribute of a MediaStreamTrack, as defined in the
      MediaStreamTrack's WebIDL specification.</t>

      <t>When an SDP session description is updated, a specific "msid-id"
      value continues to refer to the same MediaStream, and a specific
      "msid-appdata" to the same MediaStreamTrack. There is no memory apart
      from the currently valid SDP descriptions; if an msid "identifier" value
      disappears from the SDP and appears in a later negotiation, it will be
      taken to refer to a new MediaStream.</t>

      <t>If the MSID attribute does not conform to the ABNF given here, it
      SHOULD be ignored.</t>

      <t>The following is a high level description of the rules for handling
      SDP updates. Detailed procedures are in <xref
      target="s-detailed-procedures"/>.</t>

      <t><list style="symbols">
          <t>When a new msid "identifier" value occurs in a session
          description, the recipient can signal to its application that a new
          MediaStream has been added.</t>

          <t>When a session description is updated to have media descriptions
          with an msid "identifier" value, with one or more different
          "appdata" values, the recipient can siggnal to its application that
          new MediaStreamTracks have been added to the MediaStream. This is
          done for each different msid "identifier" value.</t>

          <t>When a session description is updated to no longer list any msid
          attribute on a specific media description, the recipient can signal
          to its application that the corresponding MediaStreamTrack has
          ended.</t>
        </list>In addition to signaling that the track is closed when its msid
      attribute disappears from the SDP, the track will also be signaled as
      being closed when all associated SSRCs have disappeared by the rules of
      <xref target="RFC3550"/> section 6.3.4 (BYE packet received) and 6.3.5
      (timeout), or when the corresponding media description is disabled by
      setting the port number to zero. Changing the direction of the media
      description (by setting "sendonly", "recvonly" or "inactive" attributes)
      will not close the MediaStreamTrack.</t>

      <t>The association between SSRCs and media descriptions is specified in
      <xref target="I-D.ietf-rtcweb-jsep"/>.</t>

      <section anchor="s-nonsignal" title="Handling of non-signalled tracks">
        <t>Entities that do not use msid will not send msid. This means that
        there will be some incoming RTP packets that the recipient has no
        predefined MediaStream id value for.</t>

        <t>Note that this handling is triggered by incoming RTP packets, not
        by SDP negotiation.</t>

        <t>When MSID is used, the only time this can happen is when, after the
        initial negotiation, a negotiation is performed where the answerer
        adds a MediaStreamTrack to an already established connection and
        starts sending data before the answer is received by the offerer. For
        initial negotiation, packets won't flow until the ICE candidates and
        fingerprints have been exchanged, so this is not an issue.</t>

        <t>The recipient of those packets will perform the following
        steps:</t>

        <t><list style="symbols">
            <t>When RTP packets are initially received, it will create an
            appropriate MediaStreamTrack based on the type of the media
            (carried in PayloadType), and use the MID RTP header extension
            <xref target="I-D.ietf-mmusic-sdp-bundle-negotiation"/> (if
            present) to associate the RTP packets with a specific media
            section.</t>

            <t>If the connection is not in the RTCSignalingState "stable", it
            will wait at this point.</t>

            <t>When the connection is in the RTCSignalingState "stable", it
            will assign ID values.</t>
          </list></t>

        <t>The following steps are performed to assign ID values:</t>

        <t><list style="symbols">
            <t>If there is an msid attribute, it will use that attribute to
            populate the "id" field of the MediaStreamTrack and associated
            MediaStreams, as described above.</t>

            <t>If there is no msid attribute, the identifier of the
            MediaStreamTrack will be set to a randomly generated string, and
            it will be signalled as being part of a MediaStream with the
            WebIDL "label" attribute set to "Non-WebRTC stream".</t>

            <t>After deciding on the "id" field to be applied to the
            MediaStreamTrack, the track will be signalled to the user.</t>
          </list></t>

        <t>The process above may involve a considerable amount of buffering
        before the stable state is entered. If the implementation wishes to
        limit this buffering, it MUST signal to the user that media has been
        discarded.</t>

        <t>It follows from the above that MediaStreamTracks in the "default"
        MediaStream cannot be closed by removing the msid attribute; the
        application must instead signal these as closed when the SSRC
        disappears according to the rules of RFC 3550 section 6.3.4 and 6.3.5
        or by disabling the media description by setting its port to zero.</t>
      </section>

      <section anchor="s-detailed-procedures"
               title="Detailed Offer/Answer Procedures">
        <t>These procedures are given in terms of RFC 3264-recommended
        sections. They describe the actions to be taken in terms of
        MediaStreams and MediaStreamTracks; they do not include event
        signalling inside the application, which is described in JSEP.</t>

        <section title="Generating the initial offer">
          <t>For each media description in the offer, if there is an
          associated outgoing MediaStreamTrack, the offerer adds one "a=msid"
          attribute to the section for each MediaStream with which the
          MediaStreamTrack is associated. The "identifier" field of the
          attribute is set to the WebIDL "id" attribute of the MediaStream,
          and the "appdata" field is set to the WebIDL "id" attribute of the
          MediaStreamTrack.</t>
        </section>

        <section title="Answerer processing of the Offer">
          <t>For each media description in the offer, and for each "a=msid"
          attribute in the media description, the receiver of the offer will
          perform the following steps:</t>

          <t><list style="symbols">
              <t>Extract the "appdata" field of the "a=msid" attribute</t>

              <t>Check if a MediaStreamTrack with the same WebIDL "id"
              attribute as the "appdata" field already exists, and is not in
              the "ended" state. If it is not found, create it.</t>

              <t>Extract the "identifier" field of the "a=msid" attribte.</t>

              <t>Check if a MediaStream with the same WebIDL "id" attribute
              already exists. If not, create it.</t>

              <t>Add the MediaStreamTrack to the MediaStream</t>

              <t>Signal to the user that a new MediaStreamTrack is
              available.</t>
            </list></t>
        </section>

        <section title="Generating the answer">
          <t>The answer is generated in exactly the same manner as the offer.
          "a=msid" values in the offer do not influence the answer.</t>
        </section>

        <section title="Offerer processing of the answer">
          <t>The answer is processed in exactly the same manner as the
          offer.</t>
        </section>

        <section title="Modifying the session">
          <t>On subsequent exchanges, precisely the same procedure as for the
          initial offer/answer is followed, but with one additional step in
          the parsing of the offer and answer:</t>

          <t><list style="symbols">
              <t>For each MediaStreamTrack that has been created as a result
              of previous offer/answer exchanges, and is not in the "ended"
              state, check to see if there is still an "a=msid" attribute in
              the present SDP whose "appdata" field is the same as the WebIDL
              "id" attribute of the track.</t>

              <t>If no such attribute is found, stop the MediaStreamTrack.
              This will set its state to "ended".</t>
            </list></t>
        </section>
      </section>

      <section title="Example SDP description">
        <t>The following SDP description shows the representation of a WebRTC
        PeerConnection with two MediaStreams, each of which has one audio and
        one video track. Only the parts relevant to the MSID are shown.</t>

        <t>Line wrapping, empty lines and comments are added for clarity. They
        are not part of the SDP.</t>

        <t/>

        <figure>
          <artwork><![CDATA[

# First MediaStream - id is 4701...
m=audio 56500 UDP/TLS/RTP/SAVPF 96 0 8 97 98
a=msid:47017fee-b6c1-4162-929c-a25110252400
       f83006c5-a0ff-4e0a-9ed9-d3e6747be7d9

m=video 56502 UDP/TLS/RTP/SAVPF 100 101
a=msid:47017fee-b6c1-4162-929c-a25110252400
       b47bdb4a-5db8-49b5-bcdc-e0c9a23172e0

# Second MediaStream - id is 6131....
m=audio 56503 UDP/TLS/RTP/SAVPF 96 0 8 97 98
a=msid:61317484-2ed4-49d7-9eb7-1414322a7aae
       b94006c5-cade-4e0a-9ed9-d3e6747be7d9

m=video 56504 UDP/TLS/RTP/SAVPF 100 101
a=msid:61317484-2ed4-49d7-9eb7-1414322a7aae
       f30bdb4a-1497-49b5-3198-e0c9a23172e0


]]></artwork>
        </figure>

        <t/>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="Attribute registration in existing registries">
        <t>This document requests IANA to register the "msid" attribute in the
        "att-field (media level only)" registry within the SDP parameters
        registry, according to the procedures of <xref target="RFC4566"/></t>

        <t>The required information for "msid" is:</t>

        <t><list style="symbols">
            <t>Contact name, email: IETF, contacted via mmusic@ietf.org, or a
            successor address designated by IESG</t>

            <t>Attribute name: msid</t>

            <t>Long-form attribute name: MediaStream group Identifier</t>

            <t>Subject to charset: The attribute value contains only ASCII
            characters, and is therefore not subject to the charset
            attribute.</t>

            <t>Purpose: The attribute can be used to signal the relationship
            between a WebRTC MediaStream and a set of media descriptions.</t>

            <t>Appropriate values: The details of appropriate values are given
            in RFC XXXX.</t>

            <t>MUX category: NORMAL</t>
          </list>The MUX category is defined in <xref
        target="I-D.ietf-mmusic-sdp-mux-attributes"/>.</t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>An adversary with the ability to modify SDP descriptions has the
      ability to switch around tracks between MediaStreams. This is a special
      case of the general security consideration that modification of SDP
      descriptions needs to be confined to entities trusted by the
      application.</t>

      <t>If implementing buffering as mentioned in <xref
      target="s-nonsignal"/>, the amount of buffering should be limited to
      avoid memory exhaustion attacks.</t>

      <t>Careless generation of identifiers can leak privacy-sensitive
      information. <xref target="W3C.CR-mediacapture-streams-20160519"/>
      recommends that identifiers are generated using UUID class 3 or 4 as a
      basis, which avoids such leakage.</t>

      <t>No other attacks have been identified that depend on this
      mechanism.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This note is based on sketches from, among others, Justin Uberti and
      Cullen Jennings.</t>

      <t>Special thanks to Flemming Andreassen, Ben Campbell, Miguel Garcia,
      Martin Thomson, Ted Hardie, Adam Roach, Magnus Westerlund, Alissa
      Cooper, Sue Hares and Paul Kyzivat for their work in reviewing this
      draft, with many specific language suggestions.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.3550'?>

      <?rfc include='reference.RFC.4566'?>

      <?rfc include='reference.RFC.5234'?>

      <?rfc include='reference.W3C.WD-webrtc-20160531'?>

      <?rfc include='reference.W3C.CR-mediacapture-streams-20160519'?>

      <?rfc include='reference.I-D.ietf-rtcweb-jsep'?>

      <?rfc include='reference.I-D.ietf-mmusic-sdp-mux-attributes'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.5761'?>

      <?rfc include='reference.RFC.5888'?>

      <?rfc include='reference.RFC.7656'?>

      <?rfc include='reference.I-D.ietf-mmusic-sdp-bundle-negotiation'?>

      <?rfc include='reference.I-D.ietf-rtcweb-overview'?>
    </references>

    <section title="Design considerations, rejected alternatives">
      <t>One suggested mechanism has been to use CNAME instead of a new
      attribute. This was abandoned because CNAME identifies a synchronization
      context; one can imagine both wanting to have tracks from the same
      synchronization context in multiple MediaStreams and wanting to have
      tracks from multiple synchronization contexts within one MediaStream
      (but the latter is impossible, since a MediaStream is defined to impose
      synchronization on its members).</t>

      <t>Another suggestion has been to put the msid value within an attribute
      of RTCP SR (sender report) packets. This doesn't offer the ability to
      know that you have seen all the tracks currently configured for a
      MediaStream.</t>

      <t>A suggestion that survived for a number of drafts was to define
      "msid" as a generic mechanism, where the particular semantics of this
      usage of the mechanism would be defined by an "a=wms-semantic"
      attribute. This was removed in April 2015.</t>
    </section>

    <section title="Change log">
      <t>This appendix should be deleted before publication as an RFC.</t>

      <section title="Changes from alvestrand-rtcweb-msid-00 to -01">
        <t>Added track identifier.</t>

        <t>Added inclusion-by-reference of
        draft-lennox-mmusic-source-selection for track muting.</t>

        <t>Some rewording.</t>
      </section>

      <section title="Changes from alvestrand-rtcweb-msid-01 to -02">
        <t>Split document into sections describing a generic grouping
        mechanism and sections describing the application of this grouping
        mechanism to the WebRTC MediaStream concept.</t>

        <t>Removed the mechanism for muting tracks, since this is not central
        to the MSID mechanism.</t>
      </section>

      <section title="Changes from alvestrand-rtcweb-msid-02 to mmusic-msid-00">
        <t>Changed the draft name according to the wishes of the MMUSIC group
        chairs.</t>

        <t>Added text indicting cases where it's appropriate to have the same
        appdata for multiple SSRCs.</t>

        <t>Minor textual updates.</t>
      </section>

      <section title="Changes from alvestrand-mmusic-msid-00 to -01">
        <t>Increased the amount of explanatory text, much based on a review by
        Miguel Garcia.</t>

        <t>Removed references to BUNDLE, since that spec is under active
        discussion.</t>

        <t>Removed distinguished values of the MSID identifier.</t>
      </section>

      <section title="Changes from alvestrand-mmusic-msid-01 to -02">
        <t>Changed the order of the "msid-semantic: " attribute's value fields
        and allowed multiple identifiers. This makes the attribute useful as a
        marker for "I understand this semantic".</t>

        <t>Changed the syntax for "identifier" and "appdata" to be
        "token".</t>

        <t>Changed the registry for the "msid-semantic" attribute values to be
        a new registry, based on advice given in Atlanta.</t>
      </section>

      <section title="Changes from alvestrand-mmusic-msid-02 to ietf-mmusic-00">
        <t>Updated terminology to refer to m-lines rather than RTP sessions
        when discussing SDP formats and the ability of other linking
        mechanisms to refer to SSRCs.</t>

        <t>Changed the "default" mechanism to return independent streams after
        considering the synchronization problem.</t>

        <t>Removed the space from between "msid-semantic" and its value, to be
        consistent with RFC 5576.</t>
      </section>

      <section title="Changes from mmusic-msid-00 to -01">
        <t>Reworked msid mechanism to be a per-m-line attribute, to align with
        draft-roach-mmusic-unified-plan.</t>
      </section>

      <section title="Changes from mmusic-msid-01 to -02">
        <t>Corrected several missed cases where the word "ssrc" was not
        changed to "M-line".</t>

        <t>Added pointer to unified-plan (which should be moved to point to
        -jsep)</t>

        <t>Removed suggestion that ssrc-group attributes can be used with
        "msid-semantic", it is now only the msid-semantic registry.</t>
      </section>

      <section title="Changes from mmusic-msid-02 to -03">
        <t>Corrected even more cases where the word "ssrc" was not changed to
        "M-line".</t>

        <t>Added the functionality of using an asterisk (*) in the
        msid-semantic line, in order to remove the need for listing all msids
        in the msid-semantic line whne only one msid-semantic is in use.</t>

        <t>Removed some now-unnecessary text.</t>
      </section>

      <section title="Changes from mmusic-msid-03 to -04">
        <t>Changed title to reflect focus on WebRTC MediaStreams</t>

        <t>Added a section on receiver-side media stream control, using the
        "msid-control" attribute.</t>
      </section>

      <section title="Changes from -04 to -05">
        <t>Removed the msid-control section after WG discussion.</t>

        <t>Removed some text that seemed only to pertain to resolved
        issues.</t>
      </section>

      <section title="Changes from -05 to -06">
        <t>Addressed issues found in Fleming Andreassen's review</t>

        <t>Referenced JSEP rather than unified-plan for the M-line mapping
        model</t>

        <t>Relaxed MSID definition to allow "token-char" in values rather than
        a-z 0-9 hyphen; tightened ABNF by adding length description to it.</t>

        <t>Deleted discussion of abandoned alternatives, as part of preparing
        for publication.</t>

        <t>Added a "detailed procedures" section to the WMS semantics
        description.</t>

        <t>Added IANA registration of the "msid-semantic" attribute.</t>
      </section>

      <section title="Changes from -06 to -07">
        <t>Changed terminology from referring to "WebRTC device" to referring
        to "entities that implement the WMS semantic".</t>

        <t>Changed names for ABNF constructions based on a proposal by Paul
        Kyzivat.</t>

        <t>Included a section on generic offer/answer semantics.</t>
      </section>

      <section title="Changes from -07 to -08">
        <t>Removed Appendix B that described the (now obsolete) ssrc-specific
        usage of MSID.</t>

        <t>Adopted a restructuring of the IANA section based on a suggestion
        from Martin Thomson.</t>

        <t>A number of text and ABNF clarifications based on suggestions from
        Ted Hardie, Paul Kyzivat and Adam Roach.</t>

        <t>Changed the "non-signalled track handling" to create a single
        stream with multiple tracks again, according to discussions at TPAC in
        November 2014</t>
      </section>

      <section title="Changes from -08 to -09">
        <t>Removed "wms-semantic" and all mention of multiple semantics for
        msid, as agreed at the Dallas IETF, March 2015.</t>

        <t>Addressed a number of review comments from Fleming Andresen and
        others.</t>

        <t>Changed the term "m-line" to "media description", since that is the
        term used in RFC 4566.</t>

        <t>Tried to make sure this document does not describe the API to the
        application.</t>
      </section>

      <section title="Changes from -09 to -10">
        <t>Addressed review comments from Paul Kyzivat.</t>
      </section>

      <section title="Changes from -10 to -11">
        <t>Defined the semantics of multiple MSIDs in a media section to be a
        MediaStreamTrack present in multiple MediaStreams.</t>

        <t>Made an explicit note that MediaStreamTracks are
        unidirectional.</t>

        <t>Disallowed the option of sending multiple media sections with the
        same msid (id and appdata identical).</t>
      </section>

      <section title="Changes from -11 to -12">
        <t>Added mux-category to the IANA considerations section.</t>
      </section>

      <section title="Changes from -12 to -13">
        <t>Modified registration description to delete dependency on
        -4566-bis</t>
      </section>

      <section title="Changes from -13 to -14">
        <t>Addressed nits found in Gen-ART review</t>
      </section>

      <section title="Changes from -14 to -15">
        <t>Added the terminology section. Switched from "(RTP) media stream"
        to "RTP stream" per RFC 7656.</t>

        <t>Added a mention of random ID generation to the security
        considerations section.</t>

        <t>Moved definition pointers for MediaStream and MediaStreamTrack to
        the "mediacapture-streams" document.</t>

        <t>Added note that syntactically invalid MSID fields SHOULD be
        ignored.</t>

        <t>Various small changes based on review feedback during IESG
        processing.</t>
      </section>
    </section>
  </back>
</rfc>
